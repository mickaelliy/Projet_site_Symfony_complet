<?php

namespace Mickweb\EcommerceBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query;
use Mickweb\EcommerceBundle\Entity\PropertySearch;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll()
    {
        return $this
                    ->createQueryBuilder('p')
                    ->getQuery()
                    ->getResult()
        ;
    }

    public function findAllVisibleQuery(PropertySearch $search): Query
    {
        $query = $this->findVisibleQuery();

        if ($search->getMinPrice()) {
            $query = $query->andWhere('u.prix >= :minprice');
            $query->setParameter('minprice', $search->getMinPrice());
        }

        if ($search->getMaxPrice()) {
            $query = $query->andWhere('u.prix <= :maxprice');
            $query->setParameter('maxprice', $search->getMaxPrice());
        }

        return $query->getQuery();
    }

    public function byCategorie($categories)
    {
        $qb = $this->createQueryBuilder('u')
                    ->select('u')
                    ->where('u.categories = :categories')
                    ->andWhere('u.disponible = 1') // prend seulement les pdts disponibles
                    ->orderBy('u.id')
                    ->setParameter('categories', $categories);
        return $qb->getQuery()->getResult();
    }

    public function findArray($array)
    {
        $qb = $this->createQueryBuilder('u')
                    ->select('u')
                    ->where('u.id IN (:array)')
                    ->setParameter('array', $array);
        return $qb->getQuery()->getResult();
    }

    public function recherche($chaine)
    {
        // Ajouter une condition pour que le produit s'affiche meme si le titre n'est pas tapÃ© en entier.
        $qb = $this->createQueryBuilder('u')
                    ->select('u')
                    ->where('u.titre like :chaine')  
                    ->andWhere('u.disponible = 1') // prend seulement les pdts disponibles
                    ->orderBy('u.id')
                    ->setParameter('chaine', '%'.$chaine.'%');
        return $qb->getQuery()->getResult();
    }

    private function findVisibleQuery(): QueryBuilder
    {
        return $this->createQueryBuilder('u')
            ->where('u.disponible = 1');
    } 
}
